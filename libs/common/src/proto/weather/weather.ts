// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v3.19.6
// source: libs/common/src/proto/weather/weather.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "weather";

export interface CreateSubscriptionRequest {
  email: string;
  city: string;
  frequency: string;
}

export interface CityRequest {
  city: string;
}

export interface CitiesRequests {
  cities: string[];
}

export interface DailyForecast {
  maxTemp: number;
  minTemp: number;
  avgTemp: number;
  avgHumidity: number;
  chanceOfRain: number;
  description: string;
  sunrise: string;
  sunset: string;
}

export interface CitiesDailyForecast {
  forecasts: { [key: string]: DailyForecast };
}

export interface CitiesDailyForecast_ForecastsEntry {
  key: string;
  value: DailyForecast | undefined;
}

export interface HourlyForecast {
  temp: number;
  description: string;
  feelsLikeTemp: number;
  humidity: number;
  chanceOfRain: number;
}

export interface CitiesHourlyForecast {
  forecasts: { [key: string]: HourlyForecast };
}

export interface CitiesHourlyForecast_ForecastsEntry {
  key: string;
  value: HourlyForecast | undefined;
}

export interface WeatherResponse {
  temperature: number;
  humidity: number;
  description: string;
}

export interface Empty {
}

export const WEATHER_PACKAGE_NAME = "weather";

export interface WeatherServiceClient {
  getWeather(request: CityRequest): Observable<WeatherResponse>;

  getDailyForecasts(request: CitiesRequests): Observable<CitiesDailyForecast>;

  getHourlyForecasts(request: CitiesRequests): Observable<CitiesHourlyForecast>;
}

export interface WeatherServiceController {
  getWeather(request: CityRequest): Promise<WeatherResponse> | Observable<WeatherResponse> | WeatherResponse;

  getDailyForecasts(
    request: CitiesRequests,
  ): Promise<CitiesDailyForecast> | Observable<CitiesDailyForecast> | CitiesDailyForecast;

  getHourlyForecasts(
    request: CitiesRequests,
  ): Promise<CitiesHourlyForecast> | Observable<CitiesHourlyForecast> | CitiesHourlyForecast;
}

export function WeatherServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["getWeather", "getDailyForecasts", "getHourlyForecasts"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("WeatherService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("WeatherService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const WEATHER_SERVICE_NAME = "WeatherService";
