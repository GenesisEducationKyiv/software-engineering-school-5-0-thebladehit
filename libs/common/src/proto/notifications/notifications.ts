// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v3.19.6
// source: libs/common/src/proto/notifications/notifications.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "notifications";

export interface ConfirmationRequest {
  email: string;
  token: string;
  city: string;
  frequency: string;
}

export interface DailyForecastRequest {
  email: string;
  city: string;
  maxTemp: number;
  minTemp: number;
  avgTemp: number;
  avgHumidity: number;
  chanceOfRain: number;
  description: string;
  sunrise: string;
  sunset: string;
}

export interface HourlyForecastRequest {
  email: string;
  city: string;
  temp: number;
  description: string;
  feelsLikeTemp: number;
  humidity: number;
  chanceOfRain: number;
}

export interface Empty {
}

export const NOTIFICATIONS_PACKAGE_NAME = "notifications";

export interface NotificationsServiceClient {
  sendConfirmation(request: ConfirmationRequest): Observable<Empty>;

  sendDailyForecast(request: DailyForecastRequest): Observable<Empty>;

  sendHourlyForecast(request: HourlyForecastRequest): Observable<Empty>;
}

export interface NotificationsServiceController {
  sendConfirmation(request: ConfirmationRequest): Promise<Empty> | Observable<Empty> | Empty;

  sendDailyForecast(request: DailyForecastRequest): Promise<Empty> | Observable<Empty> | Empty;

  sendHourlyForecast(request: HourlyForecastRequest): Promise<Empty> | Observable<Empty> | Empty;
}

export function NotificationsServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["sendConfirmation", "sendDailyForecast", "sendHourlyForecast"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("NotificationsService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("NotificationsService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const NOTIFICATIONS_SERVICE_NAME = "NotificationsService";
