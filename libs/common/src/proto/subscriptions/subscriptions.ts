// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v3.19.6
// source: libs/common/src/proto/subscriptions/subscriptions.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "subscriptions";

export interface CreateSubscriptionRequest {
  email: string;
  city: string;
  frequency: string;
}

export interface TokenRequest {
  token: string;
}

export interface Empty {
}

export const SUBSCRIPTIONS_PACKAGE_NAME = "subscriptions";

export interface SubscriptionsServiceClient {
  createSubscription(request: CreateSubscriptionRequest): Observable<Empty>;

  confirmSubscription(request: TokenRequest): Observable<Empty>;

  unsubscribeSubscription(request: TokenRequest): Observable<Empty>;
}

export interface SubscriptionsServiceController {
  createSubscription(request: CreateSubscriptionRequest): Promise<Empty> | Observable<Empty> | Empty;

  confirmSubscription(request: TokenRequest): Promise<Empty> | Observable<Empty> | Empty;

  unsubscribeSubscription(request: TokenRequest): Promise<Empty> | Observable<Empty> | Empty;
}

export function SubscriptionsServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["createSubscription", "confirmSubscription", "unsubscribeSubscription"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("SubscriptionsService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("SubscriptionsService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const SUBSCRIPTIONS_SERVICE_NAME = "SubscriptionsService";
