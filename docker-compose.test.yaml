version: '3.9'

services:
  weather:
    build:
      context: .
      dockerfile: ./apps/weather/Dockerfile
    restart: always
    ports:
      - "3001:3001"
    env_file:
      - .env.test
    environment:
      PORT: 3011
      GRPC_URL: "0.0.0.0:3001"
    depends_on:
      redis:
        condition: service_healthy
      mock-server:
        condition: service_started

  notifications:
    build:
      context: .
      dockerfile: ./apps/notifications/Dockerfile
    restart: always
    ports:
      - "3002:3002"
    env_file:
      - .env.test
    environment:
      PORT: 3012
      GRPC_URL: "0.0.0.0:3002"
    depends_on:
      mailhog:
        condition: service_started
      rabbitmq:
        condition: service_healthy

  subscriptions:
    build:
      context: .
      dockerfile: ./apps/subscriptions/Dockerfile
    restart: always
    ports:
      - "3000:3000"
      - "3010:3010"
    env_file:
      - .env.test
    environment:
      PORT: 3010
      GRPC_URL: "0.0.0.0:3000"
      DATABASE_URL: "postgresql://postgres:1111@postgres:5432/weather?schema=public"
    command: ["sh", "-c", "npx prisma migrate deploy && npx prisma generate && node dist/apps/subscriptions/main.js"]
    depends_on:
      postgres:
        condition: service_healthy
      notifications:
        condition: service_started
      weather:
        condition: service_started
      mock-server:
        condition: service_started
      rabbitmq:
        condition: service_healthy

  gateway:
    build:
      context: .
      dockerfile: ./apps/gateway/Dockerfile
    restart: always
    ports:
      - "3003:3003"
    env_file:
      - .env.test
    environment:
      PORT: 3003
    depends_on:
      subscriptions:
        condition: service_started
      weather:
        condition: service_started

  postgres:
    image: postgres:latest
    container_name: postgres-test
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 1111
      POSTGRES_DB: weather_test
    ports:
      - "5433:5432"
    volumes:
      - postgres_test_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis
    container_name: redis-test
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:4-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    volumes:
      - rabbitmq_data:/data
    healthcheck:
      test: [ "CMD", "rabbitmq-diagnostics", "-q", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5

  mailhog:
    image: mailhog/mailhog:latest
    container_name: mailhog-e2e
    ports:
      - "8025:8025"
      - "1025:1025"

  mock-server:
    image: mockserver/mockserver:latest
    container_name: mock-server-e2e
    ports:
      - "3004:1080"
    environment:
      - MOCKSERVER_WATCH_INITIALIZATION_JSON=true
      - MOCKSERVER_PROPERTY_FILE=/config/mockserver.properties
      - MOCKSERVER_INITIALIZATION_JSON_PATH=/config/initializerJson.json
    volumes:
      - ./test/mocks:/config

volumes:
  postgres_test_data:
  api_logs:
  redis_data:
  rabbitmq_data: